/*
 * This file is generated by jOOQ.
 */
package org.apdb4j.db;


import org.apdb4j.db.tables.Account;
import org.apdb4j.db.tables.Attribution;
import org.apdb4j.db.tables.Contract;
import org.apdb4j.db.tables.Cost;
import org.apdb4j.db.tables.Exhibition;
import org.apdb4j.db.tables.ExhibitionDetail;
import org.apdb4j.db.tables.Facility;
import org.apdb4j.db.tables.Guest;
import org.apdb4j.db.tables.Maintenance;
import org.apdb4j.db.tables.Picture;
import org.apdb4j.db.tables.PriceList;
import org.apdb4j.db.tables.PunchDate;
import org.apdb4j.db.tables.Responsibility;
import org.apdb4j.db.tables.Review;
import org.apdb4j.db.tables.Ride;
import org.apdb4j.db.tables.RideDetail;
import org.apdb4j.db.tables.Staff;
import org.apdb4j.db.tables.Ticket;
import org.apdb4j.db.tables.TicketType;
import org.apdb4j.db.tables.Validation;
import org.jooq.ForeignKey;
import org.jooq.Record;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * amusement_park.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<Record> KEY_ACCOUNT_IDACCOUNT_1 = Internal.createUniqueKey(Account.ACCOUNT, DSL.name("KEY_account_IDACCOUNT_1"), new TableField[] { Account.ACCOUNT.USERNAME }, true);
    public static final UniqueKey<Record> KEY_ACCOUNT_PRIMARY = Internal.createUniqueKey(Account.ACCOUNT, DSL.name("KEY_account_PRIMARY"), new TableField[] { Account.ACCOUNT.EMAIL }, true);
    public static final UniqueKey<Record> KEY_ATTRIBUTION_PRIMARY = Internal.createUniqueKey(Attribution.ATTRIBUTION, DSL.name("KEY_attribution_PRIMARY"), new TableField[] { Attribution.ATTRIBUTION.TICKETID }, true);
    public static final UniqueKey<Record> KEY_CONTRACT_PRIMARY = Internal.createUniqueKey(Contract.CONTRACT, DSL.name("KEY_contract_PRIMARY"), new TableField[] { Contract.CONTRACT.CONTRACTID }, true);
    public static final UniqueKey<Record> KEY_COST_PRIMARY = Internal.createUniqueKey(Cost.COST, DSL.name("KEY_cost_PRIMARY"), new TableField[] { Cost.COST.FACILITYID, Cost.COST.MONTH, Cost.COST.YEAR }, true);
    public static final UniqueKey<Record> KEY_EXHIBITION_PRIMARY = Internal.createUniqueKey(Exhibition.EXHIBITION, DSL.name("KEY_exhibition_PRIMARY"), new TableField[] { Exhibition.EXHIBITION.EXHIBITIONID }, true);
    public static final UniqueKey<Record> KEY_EXHIBITION_DETAIL_PRIMARY = Internal.createUniqueKey(ExhibitionDetail.EXHIBITION_DETAIL, DSL.name("KEY_exhibition_detail_PRIMARY"), new TableField[] { ExhibitionDetail.EXHIBITION_DETAIL.EXHIBITIONID, ExhibitionDetail.EXHIBITION_DETAIL.DATE, ExhibitionDetail.EXHIBITION_DETAIL.TIME }, true);
    public static final UniqueKey<Record> KEY_FACILITY_IDFACILITY = Internal.createUniqueKey(Facility.FACILITY, DSL.name("KEY_facility_IDFACILITY"), new TableField[] { Facility.FACILITY.NAME }, true);
    public static final UniqueKey<Record> KEY_FACILITY_PRIMARY = Internal.createUniqueKey(Facility.FACILITY, DSL.name("KEY_facility_PRIMARY"), new TableField[] { Facility.FACILITY.FACILITYID }, true);
    public static final UniqueKey<Record> KEY_GUEST_FKGUEST_OWNERSHIP_ID = Internal.createUniqueKey(Guest.GUEST, DSL.name("KEY_guest_FKguest_ownership_ID"), new TableField[] { Guest.GUEST.EMAIL }, true);
    public static final UniqueKey<Record> KEY_GUEST_PRIMARY = Internal.createUniqueKey(Guest.GUEST, DSL.name("KEY_guest_PRIMARY"), new TableField[] { Guest.GUEST.GUESTID }, true);
    public static final UniqueKey<Record> KEY_MAINTENANCE_PRIMARY = Internal.createUniqueKey(Maintenance.MAINTENANCE, DSL.name("KEY_maintenance_PRIMARY"), new TableField[] { Maintenance.MAINTENANCE.FACILITYID, Maintenance.MAINTENANCE.DATE }, true);
    public static final UniqueKey<Record> KEY_PICTURE_PRIMARY = Internal.createUniqueKey(Picture.PICTURE, DSL.name("KEY_picture_PRIMARY"), new TableField[] { Picture.PICTURE.PATH }, true);
    public static final UniqueKey<Record> KEY_PRICE_LIST_PRIMARY = Internal.createUniqueKey(PriceList.PRICE_LIST, DSL.name("KEY_price_list_PRIMARY"), new TableField[] { PriceList.PRICE_LIST.YEAR }, true);
    public static final UniqueKey<Record> KEY_PUNCH_DATE_PRIMARY = Internal.createUniqueKey(PunchDate.PUNCH_DATE, DSL.name("KEY_punch_date_PRIMARY"), new TableField[] { PunchDate.PUNCH_DATE.DATE }, true);
    public static final UniqueKey<Record> KEY_RESPONSIBILITY_PRIMARY = Internal.createUniqueKey(Responsibility.RESPONSIBILITY, DSL.name("KEY_responsibility_PRIMARY"), new TableField[] { Responsibility.RESPONSIBILITY.EMPLOYEENID, Responsibility.RESPONSIBILITY.FACILITYID, Responsibility.RESPONSIBILITY.DATE }, true);
    public static final UniqueKey<Record> KEY_REVIEW_IDREVIEW = Internal.createUniqueKey(Review.REVIEW, DSL.name("KEY_review_IDREVIEW"), new TableField[] { Review.REVIEW.FACILITYID }, true);
    public static final UniqueKey<Record> KEY_REVIEW_PRIMARY = Internal.createUniqueKey(Review.REVIEW, DSL.name("KEY_review_PRIMARY"), new TableField[] { Review.REVIEW.REVIEWID }, true);
    public static final UniqueKey<Record> KEY_RIDE_PRIMARY = Internal.createUniqueKey(Ride.RIDE, DSL.name("KEY_ride_PRIMARY"), new TableField[] { Ride.RIDE.RIDEID }, true);
    public static final UniqueKey<Record> KEY_RIDE_DETAIL_PRIMARY = Internal.createUniqueKey(RideDetail.RIDE_DETAIL, DSL.name("KEY_ride_detail_PRIMARY"), new TableField[] { RideDetail.RIDE_DETAIL.RIDEID }, true);
    public static final UniqueKey<Record> KEY_STAFF_FKSTAFF_OWNERSHIP_ID = Internal.createUniqueKey(Staff.STAFF, DSL.name("KEY_staff_FKstaff_ownership_ID"), new TableField[] { Staff.STAFF.EMAIL }, true);
    public static final UniqueKey<Record> KEY_STAFF_IDSTAFF_1 = Internal.createUniqueKey(Staff.STAFF, DSL.name("KEY_staff_IDSTAFF_1"), new TableField[] { Staff.STAFF.STAFFID }, true);
    public static final UniqueKey<Record> KEY_STAFF_PRIMARY = Internal.createUniqueKey(Staff.STAFF, DSL.name("KEY_staff_PRIMARY"), new TableField[] { Staff.STAFF.NATIONALID }, true);
    public static final UniqueKey<Record> KEY_TICKET_PRIMARY = Internal.createUniqueKey(Ticket.TICKET, DSL.name("KEY_ticket_PRIMARY"), new TableField[] { Ticket.TICKET.TICKETID }, true);
    public static final UniqueKey<Record> KEY_TICKET_TYPE_PRIMARY = Internal.createUniqueKey(TicketType.TICKET_TYPE, DSL.name("KEY_ticket_type_PRIMARY"), new TableField[] { TicketType.TICKET_TYPE.YEAR, TicketType.TICKET_TYPE.TYPE }, true);
    public static final UniqueKey<Record> KEY_VALIDATION_PRIMARY = Internal.createUniqueKey(Validation.VALIDATION, DSL.name("KEY_validation_PRIMARY"), new TableField[] { Validation.VALIDATION.DATE, Validation.VALIDATION.TICKETID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<Record, Record> FKATT_TIC_1 = Internal.createForeignKey(Attribution.ATTRIBUTION, DSL.name("FKatt_TIC_1"), new TableField[] { Attribution.ATTRIBUTION.YEAR, Attribution.ATTRIBUTION.TYPE }, Keys.KEY_TICKET_TYPE_PRIMARY, new TableField[] { TicketType.TICKET_TYPE.YEAR, TicketType.TICKET_TYPE.TYPE }, true);
    public static final ForeignKey<Record, Record> FKATT_TIC_FK = Internal.createForeignKey(Attribution.ATTRIBUTION, DSL.name("FKatt_TIC_FK"), new TableField[] { Attribution.ATTRIBUTION.TICKETID }, Keys.KEY_TICKET_PRIMARY, new TableField[] { Ticket.TICKET.TICKETID }, true);
    public static final ForeignKey<Record, Record> FKEMPLOYEMENT = Internal.createForeignKey(Contract.CONTRACT, DSL.name("FKemployement"), new TableField[] { Contract.CONTRACT.EMPLOYEENID }, Keys.KEY_STAFF_PRIMARY, new TableField[] { Staff.STAFF.NATIONALID }, true);
    public static final ForeignKey<Record, Record> FKHIRING = Internal.createForeignKey(Contract.CONTRACT, DSL.name("FKhiring"), new TableField[] { Contract.CONTRACT.EMPLOYERNID }, Keys.KEY_STAFF_PRIMARY, new TableField[] { Staff.STAFF.NATIONALID }, true);
    public static final ForeignKey<Record, Record> FKCONNECTION = Internal.createForeignKey(Cost.COST, DSL.name("FKconnection"), new TableField[] { Cost.COST.FACILITYID }, Keys.KEY_FACILITY_PRIMARY, new TableField[] { Facility.FACILITY.FACILITYID }, true);
    public static final ForeignKey<Record, Record> FKFACILITY_EXHIBITION_FK = Internal.createForeignKey(Exhibition.EXHIBITION, DSL.name("FKfacility_exhibition_FK"), new TableField[] { Exhibition.EXHIBITION.EXHIBITIONID }, Keys.KEY_FACILITY_PRIMARY, new TableField[] { Facility.FACILITY.FACILITYID }, true);
    public static final ForeignKey<Record, Record> FKEXHIBITION_EXHIBITION_DETAIL = Internal.createForeignKey(ExhibitionDetail.EXHIBITION_DETAIL, DSL.name("FKexhibition_exhibition_detail"), new TableField[] { ExhibitionDetail.EXHIBITION_DETAIL.EXHIBITIONID }, Keys.KEY_EXHIBITION_PRIMARY, new TableField[] { Exhibition.EXHIBITION.EXHIBITIONID }, true);
    public static final ForeignKey<Record, Record> FKGUEST_OWNERSHIP_FK = Internal.createForeignKey(Guest.GUEST, DSL.name("FKguest_ownership_FK"), new TableField[] { Guest.GUEST.EMAIL }, Keys.KEY_ACCOUNT_PRIMARY, new TableField[] { Account.ACCOUNT.EMAIL }, true);
    public static final ForeignKey<Record, Record> FKEXECUTION = Internal.createForeignKey(Maintenance.MAINTENANCE, DSL.name("FKexecution"), new TableField[] { Maintenance.MAINTENANCE.FACILITYID }, Keys.KEY_FACILITY_PRIMARY, new TableField[] { Facility.FACILITY.FACILITYID }, true);
    public static final ForeignKey<Record, Record> FKREPRESENT = Internal.createForeignKey(Picture.PICTURE, DSL.name("FKrepresent"), new TableField[] { Picture.PICTURE.FACILITYID }, Keys.KEY_FACILITY_PRIMARY, new TableField[] { Facility.FACILITY.FACILITYID }, true);
    public static final ForeignKey<Record, Record> FKRES_MAI = Internal.createForeignKey(Responsibility.RESPONSIBILITY, DSL.name("FKres_MAI"), new TableField[] { Responsibility.RESPONSIBILITY.FACILITYID, Responsibility.RESPONSIBILITY.DATE }, Keys.KEY_MAINTENANCE_PRIMARY, new TableField[] { Maintenance.MAINTENANCE.FACILITYID, Maintenance.MAINTENANCE.DATE }, true);
    public static final ForeignKey<Record, Record> FKRES_STA = Internal.createForeignKey(Responsibility.RESPONSIBILITY, DSL.name("FKres_STA"), new TableField[] { Responsibility.RESPONSIBILITY.EMPLOYEENID }, Keys.KEY_STAFF_PRIMARY, new TableField[] { Staff.STAFF.NATIONALID }, true);
    public static final ForeignKey<Record, Record> FKPUBLICATION = Internal.createForeignKey(Review.REVIEW, DSL.name("FKpublication"), new TableField[] { Review.REVIEW.ACCOUNT }, Keys.KEY_ACCOUNT_PRIMARY, new TableField[] { Account.ACCOUNT.EMAIL }, true);
    public static final ForeignKey<Record, Record> FKREFERENCE = Internal.createForeignKey(Review.REVIEW, DSL.name("FKreference"), new TableField[] { Review.REVIEW.FACILITYID }, Keys.KEY_FACILITY_PRIMARY, new TableField[] { Facility.FACILITY.FACILITYID }, true);
    public static final ForeignKey<Record, Record> FKFACILITY_RIDE_FK = Internal.createForeignKey(Ride.RIDE, DSL.name("FKfacility_ride_FK"), new TableField[] { Ride.RIDE.RIDEID }, Keys.KEY_FACILITY_PRIMARY, new TableField[] { Facility.FACILITY.FACILITYID }, true);
    public static final ForeignKey<Record, Record> FKRIDE_RIDE_DETAIL_FK = Internal.createForeignKey(RideDetail.RIDE_DETAIL, DSL.name("FKride_ride_detail_FK"), new TableField[] { RideDetail.RIDE_DETAIL.RIDEID }, Keys.KEY_RIDE_PRIMARY, new TableField[] { Ride.RIDE.RIDEID }, true);
    public static final ForeignKey<Record, Record> FKSTAFF_OWNERSHIP_FK = Internal.createForeignKey(Staff.STAFF, DSL.name("FKstaff_ownership_FK"), new TableField[] { Staff.STAFF.EMAIL }, Keys.KEY_ACCOUNT_PRIMARY, new TableField[] { Account.ACCOUNT.EMAIL }, true);
    public static final ForeignKey<Record, Record> FKPURCHASE = Internal.createForeignKey(Ticket.TICKET, DSL.name("FKpurchase"), new TableField[] { Ticket.TICKET.OWNERID }, Keys.KEY_GUEST_PRIMARY, new TableField[] { Guest.GUEST.GUESTID }, true);
    public static final ForeignKey<Record, Record> FKCOMPOSITION = Internal.createForeignKey(TicketType.TICKET_TYPE, DSL.name("FKcomposition"), new TableField[] { TicketType.TICKET_TYPE.YEAR }, Keys.KEY_PRICE_LIST_PRIMARY, new TableField[] { PriceList.PRICE_LIST.YEAR }, true);
    public static final ForeignKey<Record, Record> FKVAL_PUN = Internal.createForeignKey(Validation.VALIDATION, DSL.name("FKval_PUN"), new TableField[] { Validation.VALIDATION.DATE }, Keys.KEY_PUNCH_DATE_PRIMARY, new TableField[] { PunchDate.PUNCH_DATE.DATE }, true);
    public static final ForeignKey<Record, Record> FKVAL_TIC = Internal.createForeignKey(Validation.VALIDATION, DSL.name("FKval_TIC"), new TableField[] { Validation.VALIDATION.TICKETID }, Keys.KEY_TICKET_PRIMARY, new TableField[] { Ticket.TICKET.TICKETID }, true);
}
