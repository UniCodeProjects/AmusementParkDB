/*
 * This file is generated by jOOQ.
 */
package org.apdb4j.db.tables;


import java.time.LocalDate;
import java.time.LocalTime;
import java.util.Arrays;
import java.util.List;

import org.apdb4j.db.AmusementPark;
import org.apdb4j.db.Keys;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExhibitionDetail extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>amusement_park.exhibition_detail</code>
     */
    public static final ExhibitionDetail EXHIBITION_DETAIL = new ExhibitionDetail();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>amusement_park.exhibition_detail.ExhibitionID</code>.
     */
    public final TableField<Record, String> EXHIBITIONID = createField(DSL.name("ExhibitionID"), SQLDataType.CHAR(6).nullable(false), this, "");

    /**
     * The column <code>amusement_park.exhibition_detail.Date</code>.
     */
    public final TableField<Record, LocalDate> DATE = createField(DSL.name("Date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>amusement_park.exhibition_detail.Time</code>.
     */
    public final TableField<Record, LocalTime> TIME = createField(DSL.name("Time"), SQLDataType.LOCALTIME.nullable(false), this, "");

    /**
     * The column <code>amusement_park.exhibition_detail.Spectators</code>.
     */
    public final TableField<Record, Integer> SPECTATORS = createField(DSL.name("Spectators"), SQLDataType.INTEGER, this, "");

    private ExhibitionDetail(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private ExhibitionDetail(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>amusement_park.exhibition_detail</code> table
     * reference
     */
    public ExhibitionDetail(String alias) {
        this(DSL.name(alias), EXHIBITION_DETAIL);
    }

    /**
     * Create an aliased <code>amusement_park.exhibition_detail</code> table
     * reference
     */
    public ExhibitionDetail(Name alias) {
        this(alias, EXHIBITION_DETAIL);
    }

    /**
     * Create a <code>amusement_park.exhibition_detail</code> table reference
     */
    public ExhibitionDetail() {
        this(DSL.name("exhibition_detail"), null);
    }

    public <O extends Record> ExhibitionDetail(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, EXHIBITION_DETAIL);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : AmusementPark.AMUSEMENT_PARK;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_EXHIBITION_DETAIL_PRIMARY;
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.FKEXHIBITION_EXHIBITION_DETAIL);
    }

    private transient Exhibition _exhibition;

    /**
     * Get the implicit join path to the <code>amusement_park.exhibition</code>
     * table.
     */
    public Exhibition exhibition() {
        if (_exhibition == null)
            _exhibition = new Exhibition(this, Keys.FKEXHIBITION_EXHIBITION_DETAIL);

        return _exhibition;
    }

    @Override
    public ExhibitionDetail as(String alias) {
        return new ExhibitionDetail(DSL.name(alias), this);
    }

    @Override
    public ExhibitionDetail as(Name alias) {
        return new ExhibitionDetail(alias, this);
    }

    @Override
    public ExhibitionDetail as(Table<?> alias) {
        return new ExhibitionDetail(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ExhibitionDetail rename(String name) {
        return new ExhibitionDetail(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExhibitionDetail rename(Name name) {
        return new ExhibitionDetail(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExhibitionDetail rename(Table<?> name) {
        return new ExhibitionDetail(name.getQualifiedName(), null);
    }
}
