/*
 * This file is generated by jOOQ.
 */
package org.apdb4j.db.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.apdb4j.db.AmusementPark;
import org.apdb4j.db.Keys;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Responsibility extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>amusement_park.responsibility</code>
     */
    public static final Responsibility RESPONSIBILITY = new Responsibility();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>amusement_park.responsibility.FacilityID</code>.
     */
    public final TableField<Record, String> FACILITYID = createField(DSL.name("FacilityID"), SQLDataType.CHAR(6).nullable(false), this, "");

    /**
     * The column <code>amusement_park.responsibility.Date</code>.
     */
    public final TableField<Record, LocalDate> DATE = createField(DSL.name("Date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>amusement_park.responsibility.EmployeeNID</code>.
     */
    public final TableField<Record, String> EMPLOYEENID = createField(DSL.name("EmployeeNID"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    private Responsibility(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Responsibility(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>amusement_park.responsibility</code> table
     * reference
     */
    public Responsibility(String alias) {
        this(DSL.name(alias), RESPONSIBILITY);
    }

    /**
     * Create an aliased <code>amusement_park.responsibility</code> table
     * reference
     */
    public Responsibility(Name alias) {
        this(alias, RESPONSIBILITY);
    }

    /**
     * Create a <code>amusement_park.responsibility</code> table reference
     */
    public Responsibility() {
        this(DSL.name("responsibility"), null);
    }

    public <O extends Record> Responsibility(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, RESPONSIBILITY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : AmusementPark.AMUSEMENT_PARK;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_RESPONSIBILITY_PRIMARY;
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.FKRES_MAI, Keys.FKRES_STA);
    }

    private transient Maintenance _maintenance;
    private transient Staff _staff;

    /**
     * Get the implicit join path to the <code>amusement_park.maintenance</code>
     * table.
     */
    public Maintenance maintenance() {
        if (_maintenance == null)
            _maintenance = new Maintenance(this, Keys.FKRES_MAI);

        return _maintenance;
    }

    /**
     * Get the implicit join path to the <code>amusement_park.staff</code>
     * table.
     */
    public Staff staff() {
        if (_staff == null)
            _staff = new Staff(this, Keys.FKRES_STA);

        return _staff;
    }

    @Override
    public Responsibility as(String alias) {
        return new Responsibility(DSL.name(alias), this);
    }

    @Override
    public Responsibility as(Name alias) {
        return new Responsibility(alias, this);
    }

    @Override
    public Responsibility as(Table<?> alias) {
        return new Responsibility(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Responsibility rename(String name) {
        return new Responsibility(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Responsibility rename(Name name) {
        return new Responsibility(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Responsibility rename(Table<?> name) {
        return new Responsibility(name.getQualifiedName(), null);
    }
}
