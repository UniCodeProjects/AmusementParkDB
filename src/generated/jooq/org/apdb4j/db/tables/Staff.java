/*
 * This file is generated by jOOQ.
 */
package org.apdb4j.db.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.apdb4j.db.AmusementPark;
import org.apdb4j.db.Keys;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Staff extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>amusement_park.staff</code>
     */
    public static final Staff STAFF = new Staff();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>amusement_park.staff.StaffID</code>.
     */
    public final TableField<Record, String> STAFFID = createField(DSL.name("StaffID"), SQLDataType.CHAR(72).nullable(false), this, "");

    /**
     * The column <code>amusement_park.staff.NationalID</code>.
     */
    public final TableField<Record, String> NATIONALID = createField(DSL.name("NationalID"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>amusement_park.staff.Email</code>.
     */
    public final TableField<Record, String> EMAIL = createField(DSL.name("Email"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>amusement_park.staff.Name</code>.
     */
    public final TableField<Record, String> NAME = createField(DSL.name("Name"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>amusement_park.staff.Surname</code>.
     */
    public final TableField<Record, String> SURNAME = createField(DSL.name("Surname"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>amusement_park.staff.DoB</code>.
     */
    public final TableField<Record, LocalDate> DOB = createField(DSL.name("DoB"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>amusement_park.staff.BirthPlace</code>.
     */
    public final TableField<Record, String> BIRTHPLACE = createField(DSL.name("BirthPlace"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>amusement_park.staff.Role</code>.
     */
    public final TableField<Record, String> ROLE = createField(DSL.name("Role"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>amusement_park.staff.IsAdmin</code>.
     */
    public final TableField<Record, Byte> ISADMIN = createField(DSL.name("IsAdmin"), SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>amusement_park.staff.IsEmployee</code>.
     */
    public final TableField<Record, Byte> ISEMPLOYEE = createField(DSL.name("IsEmployee"), SQLDataType.TINYINT.nullable(false), this, "");

    private Staff(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Staff(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>amusement_park.staff</code> table reference
     */
    public Staff(String alias) {
        this(DSL.name(alias), STAFF);
    }

    /**
     * Create an aliased <code>amusement_park.staff</code> table reference
     */
    public Staff(Name alias) {
        this(alias, STAFF);
    }

    /**
     * Create a <code>amusement_park.staff</code> table reference
     */
    public Staff() {
        this(DSL.name("staff"), null);
    }

    public <O extends Record> Staff(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, STAFF);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : AmusementPark.AMUSEMENT_PARK;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_STAFF_PRIMARY;
    }

    @Override
    public List<UniqueKey<Record>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_STAFF_IDSTAFF_1, Keys.KEY_STAFF_FKSTAFF_OWNERSHIP_ID);
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.FKSTAFF_OWNERSHIP_FK);
    }

    private transient Account _account;

    /**
     * Get the implicit join path to the <code>amusement_park.account</code>
     * table.
     */
    public Account account() {
        if (_account == null)
            _account = new Account(this, Keys.FKSTAFF_OWNERSHIP_FK);

        return _account;
    }

    @Override
    public Staff as(String alias) {
        return new Staff(DSL.name(alias), this);
    }

    @Override
    public Staff as(Name alias) {
        return new Staff(alias, this);
    }

    @Override
    public Staff as(Table<?> alias) {
        return new Staff(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Staff rename(String name) {
        return new Staff(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Staff rename(Name name) {
        return new Staff(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Staff rename(Table<?> name) {
        return new Staff(name.getQualifiedName(), null);
    }
}
