/*
 * This file is generated by jOOQ.
 */
package org.apdb4j.db.tables;


import java.time.LocalTime;
import java.util.Arrays;
import java.util.List;

import org.apdb4j.db.AmusementPark;
import org.apdb4j.db.Keys;
import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Rides extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>amusement_park.rides</code>
     */
    public static final Rides RIDES = new Rides();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>amusement_park.rides.RideID</code>.
     */
    public final TableField<Record, String> RIDEID = createField(DSL.name("RideID"), SQLDataType.CHAR(6).nullable(false), this, "");

    /**
     * The column <code>amusement_park.rides.Intensity</code>.
     */
    public final TableField<Record, String> INTENSITY = createField(DSL.name("Intensity"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>amusement_park.rides.Duration</code>.
     */
    public final TableField<Record, LocalTime> DURATION = createField(DSL.name("Duration"), SQLDataType.LOCALTIME.nullable(false), this, "");

    /**
     * The column <code>amusement_park.rides.MaxSeats</code>.
     */
    public final TableField<Record, Integer> MAXSEATS = createField(DSL.name("MaxSeats"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>amusement_park.rides.MinHeight</code>.
     */
    public final TableField<Record, UInteger> MINHEIGHT = createField(DSL.name("MinHeight"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>amusement_park.rides.MaxHeight</code>.
     */
    public final TableField<Record, UInteger> MAXHEIGHT = createField(DSL.name("MaxHeight"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>amusement_park.rides.MinWeight</code>.
     */
    public final TableField<Record, UInteger> MINWEIGHT = createField(DSL.name("MinWeight"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>amusement_park.rides.MaxWeight</code>.
     */
    public final TableField<Record, UInteger> MAXWEIGHT = createField(DSL.name("MaxWeight"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    private Rides(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Rides(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>amusement_park.rides</code> table reference
     */
    public Rides(String alias) {
        this(DSL.name(alias), RIDES);
    }

    /**
     * Create an aliased <code>amusement_park.rides</code> table reference
     */
    public Rides(Name alias) {
        this(alias, RIDES);
    }

    /**
     * Create a <code>amusement_park.rides</code> table reference
     */
    public Rides() {
        this(DSL.name("rides"), null);
    }

    public <O extends Record> Rides(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, RIDES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : AmusementPark.AMUSEMENT_PARK;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_RIDES_PRIMARY;
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.FKR_FKR);
    }

    private transient Facilities _facilities;

    /**
     * Get the implicit join path to the <code>amusement_park.facilities</code>
     * table.
     */
    public Facilities facilities() {
        if (_facilities == null)
            _facilities = new Facilities(this, Keys.FKR_FKR);

        return _facilities;
    }

    @Override
    public List<Check<Record>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("HEIGHT_VALUES_CONSISTENCY"), "(`MinHeight` < `MaxHeight`)", true),
            Internal.createCheck(this, DSL.name("RIDEID_FORMAT"), "(`RideID` like _utf8mb4\\'RI%\\')", true),
            Internal.createCheck(this, DSL.name("RIDES_MAX_SEATS_DOMAIN"), "(`MaxSeats` > 0)", true),
            Internal.createCheck(this, DSL.name("WEIGHT_VALUES_CONSISTENCY"), "(`MinWeight` < `MaxWeight`)", true)
        );
    }

    @Override
    public Rides as(String alias) {
        return new Rides(DSL.name(alias), this);
    }

    @Override
    public Rides as(Name alias) {
        return new Rides(alias, this);
    }

    @Override
    public Rides as(Table<?> alias) {
        return new Rides(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Rides rename(String name) {
        return new Rides(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rides rename(Name name) {
        return new Rides(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rides rename(Table<?> name) {
        return new Rides(name.getQualifiedName(), null);
    }
}
