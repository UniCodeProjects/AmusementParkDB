/*
 * This file is generated by jOOQ.
 */
package org.apdb4j.db.tables;


import java.time.LocalTime;
import java.util.Arrays;
import java.util.List;

import org.apdb4j.db.AmusementPark;
import org.apdb4j.db.Keys;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RideDetail extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>amusement_park.ride_detail</code>
     */
    public static final RideDetail RIDE_DETAIL = new RideDetail();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>amusement_park.ride_detail.RideID</code>.
     */
    public final TableField<Record, String> RIDEID = createField(DSL.name("RideID"), SQLDataType.CHAR(6).nullable(false), this, "");

    /**
     * The column <code>amusement_park.ride_detail.Status</code>.
     */
    public final TableField<Record, String> STATUS = createField(DSL.name("Status"), SQLDataType.CHAR(1).nullable(false), this, "");

    /**
     * The column <code>amusement_park.ride_detail.EstimatedWaitTime</code>.
     */
    public final TableField<Record, LocalTime> ESTIMATEDWAITTIME = createField(DSL.name("EstimatedWaitTime"), SQLDataType.LOCALTIME, this, "");

    private RideDetail(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private RideDetail(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>amusement_park.ride_detail</code> table reference
     */
    public RideDetail(String alias) {
        this(DSL.name(alias), RIDE_DETAIL);
    }

    /**
     * Create an aliased <code>amusement_park.ride_detail</code> table reference
     */
    public RideDetail(Name alias) {
        this(alias, RIDE_DETAIL);
    }

    /**
     * Create a <code>amusement_park.ride_detail</code> table reference
     */
    public RideDetail() {
        this(DSL.name("ride_detail"), null);
    }

    public <O extends Record> RideDetail(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, RIDE_DETAIL);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : AmusementPark.AMUSEMENT_PARK;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_RIDE_DETAIL_PRIMARY;
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.FKRIDE_RIDE_DETAIL_FK);
    }

    private transient Ride _ride;

    /**
     * Get the implicit join path to the <code>amusement_park.ride</code> table.
     */
    public Ride ride() {
        if (_ride == null)
            _ride = new Ride(this, Keys.FKRIDE_RIDE_DETAIL_FK);

        return _ride;
    }

    @Override
    public RideDetail as(String alias) {
        return new RideDetail(DSL.name(alias), this);
    }

    @Override
    public RideDetail as(Name alias) {
        return new RideDetail(alias, this);
    }

    @Override
    public RideDetail as(Table<?> alias) {
        return new RideDetail(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RideDetail rename(String name) {
        return new RideDetail(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RideDetail rename(Name name) {
        return new RideDetail(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RideDetail rename(Table<?> name) {
        return new RideDetail(name.getQualifiedName(), null);
    }
}
