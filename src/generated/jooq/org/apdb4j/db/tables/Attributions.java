/*
 * This file is generated by jOOQ.
 */
package org.apdb4j.db.tables;


import java.util.Arrays;
import java.util.List;

import org.apdb4j.db.AmusementPark;
import org.apdb4j.db.Keys;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Attributions extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>amusement_park.attributions</code>
     */
    public static final Attributions ATTRIBUTIONS = new Attributions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>amusement_park.attributions.TicketID</code>.
     */
    public final TableField<Record, String> TICKETID = createField(DSL.name("TicketID"), SQLDataType.CHAR(10).nullable(false), this, "");

    /**
     * The column <code>amusement_park.attributions.Year</code>.
     */
    public final TableField<Record, Integer> YEAR = createField(DSL.name("Year"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>amusement_park.attributions.Type</code>.
     */
    public final TableField<Record, String> TYPE = createField(DSL.name("Type"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>amusement_park.attributions.Category</code>.
     */
    public final TableField<Record, String> CATEGORY = createField(DSL.name("Category"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    private Attributions(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Attributions(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>amusement_park.attributions</code> table
     * reference
     */
    public Attributions(String alias) {
        this(DSL.name(alias), ATTRIBUTIONS);
    }

    /**
     * Create an aliased <code>amusement_park.attributions</code> table
     * reference
     */
    public Attributions(Name alias) {
        this(alias, ATTRIBUTIONS);
    }

    /**
     * Create a <code>amusement_park.attributions</code> table reference
     */
    public Attributions() {
        this(DSL.name("attributions"), null);
    }

    public <O extends Record> Attributions(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, ATTRIBUTIONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : AmusementPark.AMUSEMENT_PARK;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_ATTRIBUTIONS_PRIMARY;
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.FKATT_TIC_FK, Keys.FKATT_TIC_1);
    }

    private transient Tickets _tickets;
    private transient TicketTypes _ticketTypes;

    /**
     * Get the implicit join path to the <code>amusement_park.tickets</code>
     * table.
     */
    public Tickets tickets() {
        if (_tickets == null)
            _tickets = new Tickets(this, Keys.FKATT_TIC_FK);

        return _tickets;
    }

    /**
     * Get the implicit join path to the
     * <code>amusement_park.ticket_types</code> table.
     */
    public TicketTypes ticketTypes() {
        if (_ticketTypes == null)
            _ticketTypes = new TicketTypes(this, Keys.FKATT_TIC_1);

        return _ticketTypes;
    }

    @Override
    public Attributions as(String alias) {
        return new Attributions(DSL.name(alias), this);
    }

    @Override
    public Attributions as(Name alias) {
        return new Attributions(alias, this);
    }

    @Override
    public Attributions as(Table<?> alias) {
        return new Attributions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Attributions rename(String name) {
        return new Attributions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Attributions rename(Name name) {
        return new Attributions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Attributions rename(Table<?> name) {
        return new Attributions(name.getQualifiedName(), null);
    }
}
