/*
 * This file is generated by jOOQ.
 */
package org.apdb4j.db.tables;


import java.time.LocalDate;
import java.time.LocalTime;
import java.util.Arrays;
import java.util.List;

import org.apdb4j.db.AmusementPark;
import org.apdb4j.db.Keys;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Review extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>amusement_park.review</code>
     */
    public static final Review REVIEW = new Review();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>amusement_park.review.ReviewID</code>.
     */
    public final TableField<Record, Integer> REVIEWID = createField(DSL.name("ReviewID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>amusement_park.review.Rating</code>.
     */
    public final TableField<Record, Byte> RATING = createField(DSL.name("Rating"), SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>amusement_park.review.Date</code>.
     */
    public final TableField<Record, LocalDate> DATE = createField(DSL.name("Date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>amusement_park.review.Time</code>.
     */
    public final TableField<Record, LocalTime> TIME = createField(DSL.name("Time"), SQLDataType.LOCALTIME.nullable(false), this, "");

    /**
     * The column <code>amusement_park.review.Description</code>.
     */
    public final TableField<Record, String> DESCRIPTION = createField(DSL.name("Description"), SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>amusement_park.review.FacilityID</code>.
     */
    public final TableField<Record, String> FACILITYID = createField(DSL.name("FacilityID"), SQLDataType.CHAR(6).nullable(false), this, "");

    /**
     * The column <code>amusement_park.review.Account</code>.
     */
    public final TableField<Record, String> ACCOUNT = createField(DSL.name("Account"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    private Review(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Review(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>amusement_park.review</code> table reference
     */
    public Review(String alias) {
        this(DSL.name(alias), REVIEW);
    }

    /**
     * Create an aliased <code>amusement_park.review</code> table reference
     */
    public Review(Name alias) {
        this(alias, REVIEW);
    }

    /**
     * Create a <code>amusement_park.review</code> table reference
     */
    public Review() {
        this(DSL.name("review"), null);
    }

    public <O extends Record> Review(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, REVIEW);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : AmusementPark.AMUSEMENT_PARK;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_REVIEW_PRIMARY;
    }

    @Override
    public List<UniqueKey<Record>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_REVIEW_IDREVIEW);
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.FKREFERENCE, Keys.FKPUBLICATION);
    }

    private transient Facility _facility;
    private transient Account _account;

    /**
     * Get the implicit join path to the <code>amusement_park.facility</code>
     * table.
     */
    public Facility facility() {
        if (_facility == null)
            _facility = new Facility(this, Keys.FKREFERENCE);

        return _facility;
    }

    /**
     * Get the implicit join path to the <code>amusement_park.account</code>
     * table.
     */
    public Account account() {
        if (_account == null)
            _account = new Account(this, Keys.FKPUBLICATION);

        return _account;
    }

    @Override
    public Review as(String alias) {
        return new Review(DSL.name(alias), this);
    }

    @Override
    public Review as(Name alias) {
        return new Review(alias, this);
    }

    @Override
    public Review as(Table<?> alias) {
        return new Review(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Review rename(String name) {
        return new Review(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Review rename(Name name) {
        return new Review(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Review rename(Table<?> name) {
        return new Review(name.getQualifiedName(), null);
    }
}
