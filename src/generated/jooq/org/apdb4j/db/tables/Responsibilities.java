/*
 * This file is generated by jOOQ.
 */
package org.apdb4j.db.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.apdb4j.db.AmusementPark;
import org.apdb4j.db.Keys;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Responsibilities extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>amusement_park.responsibilities</code>
     */
    public static final Responsibilities RESPONSIBILITIES = new Responsibilities();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>amusement_park.responsibilities.FacilityID</code>.
     */
    public final TableField<Record, String> FACILITYID = createField(DSL.name("FacilityID"), SQLDataType.CHAR(11).nullable(false), this, "");

    /**
     * The column <code>amusement_park.responsibilities.Date</code>.
     */
    public final TableField<Record, LocalDate> DATE = createField(DSL.name("Date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>amusement_park.responsibilities.EmployeeNID</code>.
     */
    public final TableField<Record, String> EMPLOYEENID = createField(DSL.name("EmployeeNID"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    private Responsibilities(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Responsibilities(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>amusement_park.responsibilities</code> table
     * reference
     */
    public Responsibilities(String alias) {
        this(DSL.name(alias), RESPONSIBILITIES);
    }

    /**
     * Create an aliased <code>amusement_park.responsibilities</code> table
     * reference
     */
    public Responsibilities(Name alias) {
        this(alias, RESPONSIBILITIES);
    }

    /**
     * Create a <code>amusement_park.responsibilities</code> table reference
     */
    public Responsibilities() {
        this(DSL.name("responsibilities"), null);
    }

    public <O extends Record> Responsibilities(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, RESPONSIBILITIES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : AmusementPark.AMUSEMENT_PARK;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_RESPONSIBILITIES_PRIMARY;
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.FKRES_MAI, Keys.FKRES_STA);
    }

    private transient Maintenances _maintenances;
    private transient Staff _staff;

    /**
     * Get the implicit join path to the
     * <code>amusement_park.maintenances</code> table.
     */
    public Maintenances maintenances() {
        if (_maintenances == null)
            _maintenances = new Maintenances(this, Keys.FKRES_MAI);

        return _maintenances;
    }

    /**
     * Get the implicit join path to the <code>amusement_park.staff</code>
     * table.
     */
    public Staff staff() {
        if (_staff == null)
            _staff = new Staff(this, Keys.FKRES_STA);

        return _staff;
    }

    @Override
    public Responsibilities as(String alias) {
        return new Responsibilities(DSL.name(alias), this);
    }

    @Override
    public Responsibilities as(Name alias) {
        return new Responsibilities(alias, this);
    }

    @Override
    public Responsibilities as(Table<?> alias) {
        return new Responsibilities(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Responsibilities rename(String name) {
        return new Responsibilities(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Responsibilities rename(Name name) {
        return new Responsibilities(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Responsibilities rename(Table<?> name) {
        return new Responsibilities(name.getQualifiedName(), null);
    }
}
