/*
 * This file is generated by jOOQ.
 */
package org.apdb4j.db.tables;


import java.time.LocalDate;
import java.time.LocalTime;
import java.util.Arrays;
import java.util.List;

import org.apdb4j.db.AmusementPark;
import org.apdb4j.db.Keys;
import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExhibitionDetails extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>amusement_park.exhibition_details</code>
     */
    public static final ExhibitionDetails EXHIBITION_DETAILS = new ExhibitionDetails();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>amusement_park.exhibition_details.ExhibitionID</code>.
     */
    public final TableField<Record, String> EXHIBITIONID = createField(DSL.name("ExhibitionID"), SQLDataType.CHAR(6).nullable(false), this, "");

    /**
     * The column <code>amusement_park.exhibition_details.Date</code>.
     */
    public final TableField<Record, LocalDate> DATE = createField(DSL.name("Date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>amusement_park.exhibition_details.Time</code>.
     */
    public final TableField<Record, LocalTime> TIME = createField(DSL.name("Time"), SQLDataType.LOCALTIME.nullable(false), this, "");

    /**
     * The column <code>amusement_park.exhibition_details.MaxSeats</code>.
     */
    public final TableField<Record, Integer> MAXSEATS = createField(DSL.name("MaxSeats"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>amusement_park.exhibition_details.Spectators</code>.
     */
    public final TableField<Record, Integer> SPECTATORS = createField(DSL.name("Spectators"), SQLDataType.INTEGER, this, "");

    private ExhibitionDetails(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private ExhibitionDetails(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>amusement_park.exhibition_details</code> table
     * reference
     */
    public ExhibitionDetails(String alias) {
        this(DSL.name(alias), EXHIBITION_DETAILS);
    }

    /**
     * Create an aliased <code>amusement_park.exhibition_details</code> table
     * reference
     */
    public ExhibitionDetails(Name alias) {
        this(alias, EXHIBITION_DETAILS);
    }

    /**
     * Create a <code>amusement_park.exhibition_details</code> table reference
     */
    public ExhibitionDetails() {
        this(DSL.name("exhibition_details"), null);
    }

    public <O extends Record> ExhibitionDetails(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, EXHIBITION_DETAILS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : AmusementPark.AMUSEMENT_PARK;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_EXHIBITION_DETAILS_PRIMARY;
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.FKR);
    }

    private transient ParkServices _parkServices;

    /**
     * Get the implicit join path to the
     * <code>amusement_park.park_services</code> table.
     */
    public ParkServices parkServices() {
        if (_parkServices == null)
            _parkServices = new ParkServices(this, Keys.FKR);

        return _parkServices;
    }

    @Override
    public List<Check<Record>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("EX_DET_ID_CHECK"), "(`ExhibitionID` like _utf8mb4\\'EX%\\')", true),
            Internal.createCheck(this, DSL.name("SPECTATORS_CONSISTENCY"), "((`Spectators` is null) or (`Spectators` <= `MaxSeats`))", true)
        );
    }

    @Override
    public ExhibitionDetails as(String alias) {
        return new ExhibitionDetails(DSL.name(alias), this);
    }

    @Override
    public ExhibitionDetails as(Name alias) {
        return new ExhibitionDetails(alias, this);
    }

    @Override
    public ExhibitionDetails as(Table<?> alias) {
        return new ExhibitionDetails(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ExhibitionDetails rename(String name) {
        return new ExhibitionDetails(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExhibitionDetails rename(Name name) {
        return new ExhibitionDetails(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExhibitionDetails rename(Table<?> name) {
        return new ExhibitionDetails(name.getQualifiedName(), null);
    }
}
