/*
 * This file is generated by jOOQ.
 */
package org.apdb4j.db.tables;


import java.time.LocalDate;
import java.time.LocalTime;
import java.util.Arrays;
import java.util.List;

import org.apdb4j.db.AmusementPark;
import org.apdb4j.db.Keys;
import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Reviews extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>amusement_park.reviews</code>
     */
    public static final Reviews REVIEWS = new Reviews();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>amusement_park.reviews.ReviewID</code>.
     */
    public final TableField<Record, UInteger> REVIEWID = createField(DSL.name("ReviewID"), SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>amusement_park.reviews.Rating</code>.
     */
    public final TableField<Record, Byte> RATING = createField(DSL.name("Rating"), SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>amusement_park.reviews.Date</code>.
     */
    public final TableField<Record, LocalDate> DATE = createField(DSL.name("Date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>amusement_park.reviews.Time</code>.
     */
    public final TableField<Record, LocalTime> TIME = createField(DSL.name("Time"), SQLDataType.LOCALTIME.nullable(false), this, "");

    /**
     * The column <code>amusement_park.reviews.Description</code>.
     */
    public final TableField<Record, String> DESCRIPTION = createField(DSL.name("Description"), SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>amusement_park.reviews.Account</code>.
     */
    public final TableField<Record, String> ACCOUNT = createField(DSL.name("Account"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>amusement_park.reviews.ParkServiceID</code>.
     */
    public final TableField<Record, String> PARKSERVICEID = createField(DSL.name("ParkServiceID"), SQLDataType.CHAR(6).nullable(false), this, "");

    private Reviews(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Reviews(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>amusement_park.reviews</code> table reference
     */
    public Reviews(String alias) {
        this(DSL.name(alias), REVIEWS);
    }

    /**
     * Create an aliased <code>amusement_park.reviews</code> table reference
     */
    public Reviews(Name alias) {
        this(alias, REVIEWS);
    }

    /**
     * Create a <code>amusement_park.reviews</code> table reference
     */
    public Reviews() {
        this(DSL.name("reviews"), null);
    }

    public <O extends Record> Reviews(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, REVIEWS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : AmusementPark.AMUSEMENT_PARK;
    }

    @Override
    public Identity<Record, UInteger> getIdentity() {
        return (Identity<Record, UInteger>) super.getIdentity();
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_REVIEWS_PRIMARY;
    }

    @Override
    public List<UniqueKey<Record>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_REVIEWS_IDREVIEW);
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.FKPUBLICATION, Keys.FKREFERENCE);
    }

    private transient Accounts _accounts;
    private transient ParkServices _parkServices;

    /**
     * Get the implicit join path to the <code>amusement_park.accounts</code>
     * table.
     */
    public Accounts accounts() {
        if (_accounts == null)
            _accounts = new Accounts(this, Keys.FKPUBLICATION);

        return _accounts;
    }

    /**
     * Get the implicit join path to the
     * <code>amusement_park.park_services</code> table.
     */
    public ParkServices parkServices() {
        if (_parkServices == null)
            _parkServices = new ParkServices(this, Keys.FKREFERENCE);

        return _parkServices;
    }

    @Override
    public List<Check<Record>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("RATING_FORMAT"), "(`Rating` between 1 and 5)", true)
        );
    }

    @Override
    public Reviews as(String alias) {
        return new Reviews(DSL.name(alias), this);
    }

    @Override
    public Reviews as(Name alias) {
        return new Reviews(alias, this);
    }

    @Override
    public Reviews as(Table<?> alias) {
        return new Reviews(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Reviews rename(String name) {
        return new Reviews(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Reviews rename(Name name) {
        return new Reviews(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Reviews rename(Table<?> name) {
        return new Reviews(name.getQualifiedName(), null);
    }
}
