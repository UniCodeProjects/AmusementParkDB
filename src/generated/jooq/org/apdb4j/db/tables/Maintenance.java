/*
 * This file is generated by jOOQ.
 */
package org.apdb4j.db.tables;


import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.apdb4j.db.AmusementPark;
import org.apdb4j.db.Keys;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Maintenance extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>amusement_park.maintenance</code>
     */
    public static final Maintenance MAINTENANCE = new Maintenance();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>amusement_park.maintenance.FacilityID</code>.
     */
    public final TableField<Record, String> FACILITYID = createField(DSL.name("FacilityID"), SQLDataType.CHAR(6).nullable(false), this, "");

    /**
     * The column <code>amusement_park.maintenance.Price</code>.
     */
    public final TableField<Record, BigDecimal> PRICE = createField(DSL.name("Price"), SQLDataType.DECIMAL(8, 2).nullable(false), this, "");

    /**
     * The column <code>amusement_park.maintenance.Description</code>.
     */
    public final TableField<Record, String> DESCRIPTION = createField(DSL.name("Description"), SQLDataType.VARCHAR(4000).nullable(false), this, "");

    /**
     * The column <code>amusement_park.maintenance.Date</code>.
     */
    public final TableField<Record, LocalDate> DATE = createField(DSL.name("Date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    private Maintenance(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Maintenance(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>amusement_park.maintenance</code> table reference
     */
    public Maintenance(String alias) {
        this(DSL.name(alias), MAINTENANCE);
    }

    /**
     * Create an aliased <code>amusement_park.maintenance</code> table reference
     */
    public Maintenance(Name alias) {
        this(alias, MAINTENANCE);
    }

    /**
     * Create a <code>amusement_park.maintenance</code> table reference
     */
    public Maintenance() {
        this(DSL.name("maintenance"), null);
    }

    public <O extends Record> Maintenance(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, MAINTENANCE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : AmusementPark.AMUSEMENT_PARK;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_MAINTENANCE_PRIMARY;
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.FKEXECUTION);
    }

    private transient Facility _facility;

    /**
     * Get the implicit join path to the <code>amusement_park.facility</code>
     * table.
     */
    public Facility facility() {
        if (_facility == null)
            _facility = new Facility(this, Keys.FKEXECUTION);

        return _facility;
    }

    @Override
    public Maintenance as(String alias) {
        return new Maintenance(DSL.name(alias), this);
    }

    @Override
    public Maintenance as(Name alias) {
        return new Maintenance(alias, this);
    }

    @Override
    public Maintenance as(Table<?> alias) {
        return new Maintenance(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Maintenance rename(String name) {
        return new Maintenance(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Maintenance rename(Name name) {
        return new Maintenance(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Maintenance rename(Table<?> name) {
        return new Maintenance(name.getQualifiedName(), null);
    }
}
