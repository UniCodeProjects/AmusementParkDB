/*
 * This file is generated by jOOQ.
 */
package org.apdb4j.db.tables;


import java.util.Arrays;
import java.util.List;

import org.apdb4j.db.AmusementPark;
import org.apdb4j.db.Keys;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Attribution extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>amusement_park.attribution</code>
     */
    public static final Attribution ATTRIBUTION = new Attribution();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>amusement_park.attribution.TicketID</code>.
     */
    public final TableField<Record, String> TICKETID = createField(DSL.name("TicketID"), SQLDataType.CHAR(65).nullable(false), this, "");

    /**
     * The column <code>amusement_park.attribution.Year</code>.
     */
    public final TableField<Record, Short> YEAR = createField(DSL.name("Year"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>amusement_park.attribution.Type</code>.
     */
    public final TableField<Record, String> TYPE = createField(DSL.name("Type"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    private Attribution(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Attribution(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>amusement_park.attribution</code> table reference
     */
    public Attribution(String alias) {
        this(DSL.name(alias), ATTRIBUTION);
    }

    /**
     * Create an aliased <code>amusement_park.attribution</code> table reference
     */
    public Attribution(Name alias) {
        this(alias, ATTRIBUTION);
    }

    /**
     * Create a <code>amusement_park.attribution</code> table reference
     */
    public Attribution() {
        this(DSL.name("attribution"), null);
    }

    public <O extends Record> Attribution(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, ATTRIBUTION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : AmusementPark.AMUSEMENT_PARK;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_ATTRIBUTION_PRIMARY;
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.FKATT_TIC_FK, Keys.FKATT_TIC_1);
    }

    private transient Ticket _ticket;
    private transient TicketType _ticketType;

    /**
     * Get the implicit join path to the <code>amusement_park.ticket</code>
     * table.
     */
    public Ticket ticket() {
        if (_ticket == null)
            _ticket = new Ticket(this, Keys.FKATT_TIC_FK);

        return _ticket;
    }

    /**
     * Get the implicit join path to the <code>amusement_park.ticket_type</code>
     * table.
     */
    public TicketType ticketType() {
        if (_ticketType == null)
            _ticketType = new TicketType(this, Keys.FKATT_TIC_1);

        return _ticketType;
    }

    @Override
    public Attribution as(String alias) {
        return new Attribution(DSL.name(alias), this);
    }

    @Override
    public Attribution as(Name alias) {
        return new Attribution(alias, this);
    }

    @Override
    public Attribution as(Table<?> alias) {
        return new Attribution(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Attribution rename(String name) {
        return new Attribution(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Attribution rename(Name name) {
        return new Attribution(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Attribution rename(Table<?> name) {
        return new Attribution(name.getQualifiedName(), null);
    }
}
