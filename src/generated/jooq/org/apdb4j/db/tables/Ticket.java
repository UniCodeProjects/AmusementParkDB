/*
 * This file is generated by jOOQ.
 */
package org.apdb4j.db.tables;


import java.time.LocalDate;
import java.time.LocalTime;
import java.util.Arrays;
import java.util.List;

import org.apdb4j.db.AmusementPark;
import org.apdb4j.db.Keys;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Ticket extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>amusement_park.ticket</code>
     */
    public static final Ticket TICKET = new Ticket();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>amusement_park.ticket.TicketID</code>.
     */
    public final TableField<Record, String> TICKETID = createField(DSL.name("TicketID"), SQLDataType.CHAR(65).nullable(false), this, "");

    /**
     * The column <code>amusement_park.ticket.PurchaseDate</code>.
     */
    public final TableField<Record, LocalDate> PURCHASEDATE = createField(DSL.name("PurchaseDate"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>amusement_park.ticket.ValidOn</code>.
     */
    public final TableField<Record, LocalDate> VALIDON = createField(DSL.name("ValidOn"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>amusement_park.ticket.ValidUntil</code>.
     */
    public final TableField<Record, LocalDate> VALIDUNTIL = createField(DSL.name("ValidUntil"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>amusement_park.ticket.Duration</code>.
     */
    public final TableField<Record, LocalTime> DURATION = createField(DSL.name("Duration"), SQLDataType.LOCALTIME, this, "");

    /**
     * The column <code>amusement_park.ticket.OwnerID</code>.
     */
    public final TableField<Record, String> OWNERID = createField(DSL.name("OwnerID"), SQLDataType.CHAR(72).nullable(false), this, "");

    /**
     * The column <code>amusement_park.ticket.Year</code>.
     */
    public final TableField<Record, Short> YEAR = createField(DSL.name("Year"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>amusement_park.ticket.Type</code>.
     */
    public final TableField<Record, String> TYPE = createField(DSL.name("Type"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    private Ticket(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Ticket(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>amusement_park.ticket</code> table reference
     */
    public Ticket(String alias) {
        this(DSL.name(alias), TICKET);
    }

    /**
     * Create an aliased <code>amusement_park.ticket</code> table reference
     */
    public Ticket(Name alias) {
        this(alias, TICKET);
    }

    /**
     * Create a <code>amusement_park.ticket</code> table reference
     */
    public Ticket() {
        this(DSL.name("ticket"), null);
    }

    public <O extends Record> Ticket(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, TICKET);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : AmusementPark.AMUSEMENT_PARK;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_TICKET_PRIMARY;
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.FKPURCHASE);
    }

    private transient Guest _guest;

    /**
     * Get the implicit join path to the <code>amusement_park.guest</code>
     * table.
     */
    public Guest guest() {
        if (_guest == null)
            _guest = new Guest(this, Keys.FKPURCHASE);

        return _guest;
    }

    @Override
    public Ticket as(String alias) {
        return new Ticket(DSL.name(alias), this);
    }

    @Override
    public Ticket as(Name alias) {
        return new Ticket(alias, this);
    }

    @Override
    public Ticket as(Table<?> alias) {
        return new Ticket(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Ticket rename(String name) {
        return new Ticket(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ticket rename(Name name) {
        return new Ticket(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ticket rename(Table<?> name) {
        return new Ticket(name.getQualifiedName(), null);
    }
}
