/*
 * This file is generated by jOOQ.
 */
package org.apdb4j.db.tables;


import java.util.Arrays;
import java.util.List;

import org.apdb4j.db.AmusementPark;
import org.apdb4j.db.Keys;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Exhibition extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>amusement_park.exhibition</code>
     */
    public static final Exhibition EXHIBITION = new Exhibition();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>amusement_park.exhibition.ExhibitionID</code>.
     */
    public final TableField<Record, String> EXHIBITIONID = createField(DSL.name("ExhibitionID"), SQLDataType.CHAR(6).nullable(false), this, "");

    /**
     * The column <code>amusement_park.exhibition.MaxSeats</code>.
     */
    public final TableField<Record, Integer> MAXSEATS = createField(DSL.name("MaxSeats"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>amusement_park.exhibition.Description</code>.
     */
    public final TableField<Record, String> DESCRIPTION = createField(DSL.name("Description"), SQLDataType.VARCHAR(500), this, "");

    private Exhibition(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Exhibition(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>amusement_park.exhibition</code> table reference
     */
    public Exhibition(String alias) {
        this(DSL.name(alias), EXHIBITION);
    }

    /**
     * Create an aliased <code>amusement_park.exhibition</code> table reference
     */
    public Exhibition(Name alias) {
        this(alias, EXHIBITION);
    }

    /**
     * Create a <code>amusement_park.exhibition</code> table reference
     */
    public Exhibition() {
        this(DSL.name("exhibition"), null);
    }

    public <O extends Record> Exhibition(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, EXHIBITION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : AmusementPark.AMUSEMENT_PARK;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_EXHIBITION_PRIMARY;
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.FKFACILITY_EXHIBITION_FK);
    }

    private transient Facility _facility;

    /**
     * Get the implicit join path to the <code>amusement_park.facility</code>
     * table.
     */
    public Facility facility() {
        if (_facility == null)
            _facility = new Facility(this, Keys.FKFACILITY_EXHIBITION_FK);

        return _facility;
    }

    @Override
    public Exhibition as(String alias) {
        return new Exhibition(DSL.name(alias), this);
    }

    @Override
    public Exhibition as(Name alias) {
        return new Exhibition(alias, this);
    }

    @Override
    public Exhibition as(Table<?> alias) {
        return new Exhibition(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Exhibition rename(String name) {
        return new Exhibition(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Exhibition rename(Name name) {
        return new Exhibition(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Exhibition rename(Table<?> name) {
        return new Exhibition(name.getQualifiedName(), null);
    }
}
