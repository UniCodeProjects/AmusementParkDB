/*
 * This file is generated by jOOQ.
 */
package org.apdb4j.db.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.apdb4j.db.AmusementPark;
import org.apdb4j.db.Keys;
import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ParkServices extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>amusement_park.park_services</code>
     */
    public static final ParkServices PARK_SERVICES = new ParkServices();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>amusement_park.park_services.ParkServiceID</code>.
     */
    public final TableField<Record, String> PARKSERVICEID = createField(DSL.name("ParkServiceID"), SQLDataType.CHAR(11).nullable(false), this, "");

    /**
     * The column <code>amusement_park.park_services.Name</code>.
     */
    public final TableField<Record, String> NAME = createField(DSL.name("Name"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>amusement_park.park_services.AvgRating</code>.
     */
    public final TableField<Record, BigDecimal> AVGRATING = createField(DSL.name("AvgRating"), SQLDataType.DECIMAL(2, 1).nullable(false), this, "");

    /**
     * The column <code>amusement_park.park_services.NumReviews</code>.
     */
    public final TableField<Record, UInteger> NUMREVIEWS = createField(DSL.name("NumReviews"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>amusement_park.park_services.Type</code>.
     */
    public final TableField<Record, String> TYPE = createField(DSL.name("Type"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>amusement_park.park_services.Description</code>.
     */
    public final TableField<Record, String> DESCRIPTION = createField(DSL.name("Description"), SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>amusement_park.park_services.IsExhibition</code>.
     */
    public final TableField<Record, Byte> ISEXHIBITION = createField(DSL.name("IsExhibition"), SQLDataType.TINYINT.nullable(false), this, "");

    private ParkServices(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private ParkServices(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>amusement_park.park_services</code> table
     * reference
     */
    public ParkServices(String alias) {
        this(DSL.name(alias), PARK_SERVICES);
    }

    /**
     * Create an aliased <code>amusement_park.park_services</code> table
     * reference
     */
    public ParkServices(Name alias) {
        this(alias, PARK_SERVICES);
    }

    /**
     * Create a <code>amusement_park.park_services</code> table reference
     */
    public ParkServices() {
        this(DSL.name("park_services"), null);
    }

    public <O extends Record> ParkServices(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, PARK_SERVICES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : AmusementPark.AMUSEMENT_PARK;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_PARK_SERVICES_PRIMARY;
    }

    @Override
    public List<UniqueKey<Record>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_PARK_SERVICES_IDPARK_SERVICE_1);
    }

    @Override
    public List<Check<Record>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("AVGRATING_CHECK"), "(((`AvgRating` = 0.0) and (`NumReviews` = 0)) or ((`AvgRating` >= 1.0) and (`NumReviews` >= 1)))", true),
            Internal.createCheck(this, DSL.name("AVGRATING_DOMAIN"), "(`AvgRating` between 0 and 5)", true),
            Internal.createCheck(this, DSL.name("EXHIBITION_CHECK"), "(((`IsExhibition` = false) or (`ParkServiceID` like _utf8mb4\\'EX%\\')) and ((`IsExhibition` = true) or (`ParkServiceID` like _utf8mb4\\'SH%\\') or (`ParkServiceID` like _utf8mb4\\'RI%\\')))", true),
            Internal.createCheck(this, DSL.name("PARKSERVICEID_CHECK"), "((`ParkServiceID` like _utf8mb4\\'SH%\\') or (`ParkServiceID` like _utf8mb4\\'RI%\\') or (`ParkServiceID` like _utf8mb4\\'EX%\\'))", true)
        );
    }

    @Override
    public ParkServices as(String alias) {
        return new ParkServices(DSL.name(alias), this);
    }

    @Override
    public ParkServices as(Name alias) {
        return new ParkServices(alias, this);
    }

    @Override
    public ParkServices as(Table<?> alias) {
        return new ParkServices(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ParkServices rename(String name) {
        return new ParkServices(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ParkServices rename(Name name) {
        return new ParkServices(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ParkServices rename(Table<?> name) {
        return new ParkServices(name.getQualifiedName(), null);
    }
}
