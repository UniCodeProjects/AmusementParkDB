/*
 * This file is generated by jOOQ.
 */
package org.apdb4j.db.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.apdb4j.db.AmusementPark;
import org.apdb4j.db.Keys;
import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tickets extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>amusement_park.tickets</code>
     */
    public static final Tickets TICKETS = new Tickets();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>amusement_park.tickets.TicketID</code>.
     */
    public final TableField<Record, String> TICKETID = createField(DSL.name("TicketID"), SQLDataType.CHAR(65).nullable(false), this, "");

    /**
     * The column <code>amusement_park.tickets.PurchaseDate</code>.
     */
    public final TableField<Record, LocalDate> PURCHASEDATE = createField(DSL.name("PurchaseDate"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>amusement_park.tickets.ValidOn</code>.
     */
    public final TableField<Record, LocalDate> VALIDON = createField(DSL.name("ValidOn"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>amusement_park.tickets.ValidUntil</code>.
     */
    public final TableField<Record, LocalDate> VALIDUNTIL = createField(DSL.name("ValidUntil"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>amusement_park.tickets.RemainingEntrances</code>.
     */
    public final TableField<Record, Integer> REMAININGENTRANCES = createField(DSL.name("RemainingEntrances"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>amusement_park.tickets.OwnerID</code>.
     */
    public final TableField<Record, String> OWNERID = createField(DSL.name("OwnerID"), SQLDataType.CHAR(72).nullable(false), this, "");

    private Tickets(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Tickets(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>amusement_park.tickets</code> table reference
     */
    public Tickets(String alias) {
        this(DSL.name(alias), TICKETS);
    }

    /**
     * Create an aliased <code>amusement_park.tickets</code> table reference
     */
    public Tickets(Name alias) {
        this(alias, TICKETS);
    }

    /**
     * Create a <code>amusement_park.tickets</code> table reference
     */
    public Tickets() {
        this(DSL.name("tickets"), null);
    }

    public <O extends Record> Tickets(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, TICKETS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : AmusementPark.AMUSEMENT_PARK;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_TICKETS_PRIMARY;
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.FKPURCHASE);
    }

    private transient Guests _guests;

    /**
     * Get the implicit join path to the <code>amusement_park.guests</code>
     * table.
     */
    public Guests guests() {
        if (_guests == null)
            _guests = new Guests(this, Keys.FKPURCHASE);

        return _guests;
    }

    @Override
    public List<Check<Record>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("PURCHASE_DATE_CHK"), "(((`ValidOn` is not null) and (`PurchaseDate` <= `ValidOn`)) or ((`ValidUntil` is not null) and (`PurchaseDate` <= `ValidUntil`)))", true),
            Internal.createCheck(this, DSL.name("REMAINING_ENTRANCES_DOMAIN"), "(`RemainingEntrances` >= 0)", true),
            Internal.createCheck(this, DSL.name("TICKET_TYPE_CHK"), "(((`ValidOn` is not null) and (`ValidUntil` is null)) or ((`ValidOn` is null) and (`ValidUntil` is not null)))", true),
            Internal.createCheck(this, DSL.name("TICKETID_FORMAT"), "(`TicketID` like _utf8mb4\\'T%\\')", true)
        );
    }

    @Override
    public Tickets as(String alias) {
        return new Tickets(DSL.name(alias), this);
    }

    @Override
    public Tickets as(Name alias) {
        return new Tickets(alias, this);
    }

    @Override
    public Tickets as(Table<?> alias) {
        return new Tickets(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tickets rename(String name) {
        return new Tickets(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tickets rename(Name name) {
        return new Tickets(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tickets rename(Table<?> name) {
        return new Tickets(name.getQualifiedName(), null);
    }
}
