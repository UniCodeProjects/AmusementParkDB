/*
 * This file is generated by jOOQ.
 */
package org.apdb4j.db.tables;


import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.apdb4j.db.AmusementPark;
import org.apdb4j.db.Keys;
import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Maintenances extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>amusement_park.maintenances</code>
     */
    public static final Maintenances MAINTENANCES = new Maintenances();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>amusement_park.maintenances.FacilityID</code>.
     */
    public final TableField<Record, String> FACILITYID = createField(DSL.name("FacilityID"), SQLDataType.CHAR(6).nullable(false), this, "");

    /**
     * The column <code>amusement_park.maintenances.Price</code>.
     */
    public final TableField<Record, BigDecimal> PRICE = createField(DSL.name("Price"), SQLDataType.DECIMAL(8, 2).nullable(false), this, "");

    /**
     * The column <code>amusement_park.maintenances.Description</code>.
     */
    public final TableField<Record, String> DESCRIPTION = createField(DSL.name("Description"), SQLDataType.VARCHAR(4000).nullable(false), this, "");

    /**
     * The column <code>amusement_park.maintenances.Date</code>.
     */
    public final TableField<Record, LocalDate> DATE = createField(DSL.name("Date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    private Maintenances(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Maintenances(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>amusement_park.maintenances</code> table
     * reference
     */
    public Maintenances(String alias) {
        this(DSL.name(alias), MAINTENANCES);
    }

    /**
     * Create an aliased <code>amusement_park.maintenances</code> table
     * reference
     */
    public Maintenances(Name alias) {
        this(alias, MAINTENANCES);
    }

    /**
     * Create a <code>amusement_park.maintenances</code> table reference
     */
    public Maintenances() {
        this(DSL.name("maintenances"), null);
    }

    public <O extends Record> Maintenances(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, MAINTENANCES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : AmusementPark.AMUSEMENT_PARK;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_MAINTENANCES_PRIMARY;
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.FKEXECUTION);
    }

    private transient Facilities _facilities;

    /**
     * Get the implicit join path to the <code>amusement_park.facilities</code>
     * table.
     */
    public Facilities facilities() {
        if (_facilities == null)
            _facilities = new Facilities(this, Keys.FKEXECUTION);

        return _facilities;
    }

    @Override
    public List<Check<Record>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("PRICE_NOT_NEGATIVITY_CHECK"), "(`Price` >= 0)", true)
        );
    }

    @Override
    public Maintenances as(String alias) {
        return new Maintenances(DSL.name(alias), this);
    }

    @Override
    public Maintenances as(Name alias) {
        return new Maintenances(alias, this);
    }

    @Override
    public Maintenances as(Table<?> alias) {
        return new Maintenances(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Maintenances rename(String name) {
        return new Maintenances(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Maintenances rename(Name name) {
        return new Maintenances(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Maintenances rename(Table<?> name) {
        return new Maintenances(name.getQualifiedName(), null);
    }
}
