/*
 * This file is generated by jOOQ.
 */
package org.apdb4j.db.tables;


import java.time.LocalTime;
import java.util.Arrays;
import java.util.List;

import org.apdb4j.db.AmusementPark;
import org.apdb4j.db.Keys;
import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RideDetails extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>amusement_park.ride_details</code>
     */
    public static final RideDetails RIDE_DETAILS = new RideDetails();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>amusement_park.ride_details.RideID</code>.
     */
    public final TableField<Record, String> RIDEID = createField(DSL.name("RideID"), SQLDataType.CHAR(6).nullable(false), this, "");

    /**
     * The column <code>amusement_park.ride_details.Status</code>.
     */
    public final TableField<Record, String> STATUS = createField(DSL.name("Status"), SQLDataType.CHAR(1).nullable(false), this, "");

    /**
     * The column <code>amusement_park.ride_details.EstimatedWaitTime</code>.
     */
    public final TableField<Record, LocalTime> ESTIMATEDWAITTIME = createField(DSL.name("EstimatedWaitTime"), SQLDataType.LOCALTIME, this, "");

    private RideDetails(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private RideDetails(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>amusement_park.ride_details</code> table
     * reference
     */
    public RideDetails(String alias) {
        this(DSL.name(alias), RIDE_DETAILS);
    }

    /**
     * Create an aliased <code>amusement_park.ride_details</code> table
     * reference
     */
    public RideDetails(Name alias) {
        this(alias, RIDE_DETAILS);
    }

    /**
     * Create a <code>amusement_park.ride_details</code> table reference
     */
    public RideDetails() {
        this(DSL.name("ride_details"), null);
    }

    public <O extends Record> RideDetails(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, RIDE_DETAILS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : AmusementPark.AMUSEMENT_PARK;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_RIDE_DETAILS_PRIMARY;
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.FKRIDE_RIDE_DETAIL_FK);
    }

    private transient Rides _rides;

    /**
     * Get the implicit join path to the <code>amusement_park.rides</code>
     * table.
     */
    public Rides rides() {
        if (_rides == null)
            _rides = new Rides(this, Keys.FKRIDE_RIDE_DETAIL_FK);

        return _rides;
    }

    @Override
    public List<Check<Record>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("RIDEID_CHECK"), "(`RideID` like _utf8mb4\\'RI%\\')", true),
            Internal.createCheck(this, DSL.name("STATUS_CHECK"), "(((`EstimatedWaitTime` is not null) or (`Status` in (_utf8mb4\\'C\\',_utf8mb4\\'M\\'))) and ((`EstimatedWaitTime` is null) or (`Status` = _utf8mb4\\'O\\')))", true),
            Internal.createCheck(this, DSL.name("STATUS_DOMAIN"), "(`Status` in (_utf8mb4\\'O\\',_utf8mb4\\'M\\',_utf8mb4\\'C\\'))", true)
        );
    }

    @Override
    public RideDetails as(String alias) {
        return new RideDetails(DSL.name(alias), this);
    }

    @Override
    public RideDetails as(Name alias) {
        return new RideDetails(alias, this);
    }

    @Override
    public RideDetails as(Table<?> alias) {
        return new RideDetails(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RideDetails rename(String name) {
        return new RideDetails(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RideDetails rename(Name name) {
        return new RideDetails(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RideDetails rename(Table<?> name) {
        return new RideDetails(name.getQualifiedName(), null);
    }
}
